#!/usr/bin/env stack
{- stack
    --nix
    --install-ghc
    runghc
    --package turtle
    --package protolude
    --package unix
    --package xdg-basedir
    --package pureMD5
-}

{-
 -  This program is free software: you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the Free
 -  Software Foundation, either version 3 of the License, or (at your option)
 -  any later version.
 -
 -  This program is distributed in the hope that it will be useful, but WITHOUT
 -  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 -  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 -  more details.
 -
 -  You should have received a copy of the GNU General Public License along with
 -  this program.  If not, see <http://www.gnu.org/licenses/>.
 -
 -}

{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}

import           Protolude                      hiding (FilePath, die, fold,
                                                 (%), (<>), show)
import           Turtle

import           System.Environment.XDG.BaseDir (getUserDataDir)

import qualified Control.Foldl                  as L
import qualified Data.Binary                    as B
import qualified Data.ByteString.Base64.Lazy    as B64
import qualified Data.ByteString.Lazy           as BL
import qualified Data.Digest.Pure.MD5           as M
import qualified Data.Text                      as T
import qualified Filesystem.Path.CurrentOS      as F
import qualified System.Posix.Files             as P
import qualified System.Process                 as S

type PdfViewer = [Text]
type PID = Text
type Verbose = Bool

pdfViewer :: PdfViewer
pdfViewer = ["zathura", "evince", "okular"]

prefViewer :: [Char]
prefViewer = "zathura"

name :: Text
name = "Epdfphron"

version :: Text
version = "0.1.1"

banner :: Description
banner = fromString $ toS $
    name <> " v. " <> version <> " - the shepherd of your opened pdfs\n"
    <> "(C) 2017 Robin Raymond; licensed under GPL 3"

data CommandType
    = Status Bool
    | Save Text
    | Load Text
    | Show

data Command
    = Command
    { verbose :: Bool
    , action  :: CommandType
    }

cmdLine :: Parser Command
cmdLine = Command
        <$> (switch "verbose" 'v' "display verbose output")
        <*> (fmap Status
                (subcommand "status" "display information about current session"
                    (switch "computer" 'c' "display output parsable"))
           <|> fmap Save
                (subcommand "save" "save the current session to the database"
                    (optText "name" 'n' "name of session"))
           <|> fmap Load
                (subcommand "load" "restore a session from the database"
                    (optText "name" 'n' "name of session"))
           <|> (subcommand "show" "show saved sessions" (pure Show))
            )


viewerPattern :: [Text] -> Pattern Text
viewerPattern []     = mzero
viewerPattern (x:xs) = (text x) <|> viewerPattern xs

getProcDirs :: Shell PID
getProcDirs = do
    proc <- ls "/proc"
    s    <- liftIO $ stat proc
    let p = fmap toText $ stripPrefix "/proc/" proc

    case (p, isDirectory s) of
        (Just (Right q), True)
            -> if (not $ null (match decimal q))
                  then return q
                  else mzero
        otherwise -> mzero

isAccessible :: FilePath -> Shell Text
isAccessible p = do
    e <- testfile p

    let t = fmap toS $ toText p

    if e
    then do
        a <- liftIO $ mapM (\x -> P.fileAccess x True False True) t
        case (a, t) of
            (Right True, Right x) -> return (toS x)
            otherwise             -> mzero
    else mzero

getPIDs :: PdfViewer -> Shell PID
getPIDs viewers = do
    pd <- getProcDirs

    let exe = "/proc" </> (fromString $ toS pd) </> "exe"

    t <- isAccessible exe

    l <- liftIO $ P.readSymbolicLink (toS t)

    if (not $ null $ match (contains (viewerPattern viewers)) (toS l))
    then return pd
    else mzero


getOpenedFiles :: PID -> Shell FilePath
getOpenedFiles pid = do
    f <- ls ("/proc" </> (fromString $ toS pid) </> "fd")
    b <- testfile f
    if b
    then pure f
    else mzero


isPdf :: FilePath -> Bool
isPdf p = ((extension p) `elem` (fmap Just ["pdf", "djvu"]))

isTempFile :: FilePath -> Bool
isTempFile p = case stripPrefix "/tmp/" p of
    Just _  -> True
    Nothing -> False

isRegFile :: MonadIO m => FilePath -> m Bool
isRegFile p = fmap isRegularFile (stat p)

main :: IO ()
main = do
    com <- options banner cmdLine
    let vb = verbose com
        ac = action com
    case ac of
        Status c  -> status vb c
        Save name -> save vb name
        Load name -> load vb name
        Show      -> show


getOpenedDocuments :: Bool -> Shell (PID, [FilePath])
getOpenedDocuments vb = do
    pid <- getPIDs pdfViewer
    when vb $ putStrLn (format ("Observing PID=" %s) pid)

    fd <- fold (getOpenedFiles pid) L.list

    when vb $ putStrLn ("Open Files:" :: Text) >> print fd

    real_path <- liftIO $ mapM (P.readSymbolicLink . F.encodeString) fd
    let paths = filter (isPdf . fromString) real_path

    when vb $ putStrLn ("Read Paths:" :: Text) >> print paths

    pure (pid, fmap F.decodeString paths)


printPath :: MonadIO m => FilePath -> m ()
printPath p = do
    putStr ("  * " :: Text)
    putStrLn (F.encodeString p)

status :: MonadIO m => Verbose -> Bool -> m ()
status vb c = do
    dat <- fold (getOpenedDocuments vb) L.list
    let paths = fmap snd dat
        pids  = fmap fst dat
        rp = concat paths
        temp = filter isTempFile rp

    if c
    then mapM_ (putStrLn . F.encodeString) rp
    else do
        putStrLn ("" :: Text)
        putStrLn $ format ("Found " %d% " running instance(s) of document viewers.")
                          (length pids)
        putStrLn ("" :: Text)
        putStrLn $ format ("The following " %d% " opened document(s) were found:")
                          (length rp)
        mapM_ printPath rp

        putStrLn ("" :: Text)
        putStrLn $ format ("The following " %d% " opened document(s) are temporary:")
                          (length temp)
        mapM_ printPath temp

        liftIO $ getUserDataDir "epdfphron" >>= print

load :: MonadIO m => Verbose -> Text -> m ()
load vb name = do
    datadir <- liftIO $ fmap (fromText . toS) (getUserDataDir "epdfphron")
    let sessionsfile = datadir </> "sessions" </> (fromText name)
    exists <- testfile sessionsfile

    when (not exists) $ die "Error: Can't fine session."

    c <- liftIO $ readTextFile sessionsfile
    let paths = fmap (return . toS) $ T.lines c
    liftIO $ mapM_ (S.spawnProcess prefViewer) paths

show :: MonadIO m => m ()
show = do
    datadir <- liftIO $ fmap (fromText . toS) (getUserDataDir "epdfphron")
    sessions <- fold (ls (datadir </> "sessions")) L.list

    putStrLn (format ("Found " %d% " session(s)") (length sessions))
    let printS s = putStrLn (format ("  * " %fp) (basename s))

    mapM_ printS sessions

save :: MonadIO m => Verbose -> Text -> m ()
save vb name = do
    datadir <- liftIO $ fmap (fromText . toS) (getUserDataDir "epdfphron")

    let sessiondir = datadir </> "sessions"
        rescuedir = datadir </> "rescue"

    exists <- testdir sessiondir

    when (not exists) $ do
        when vb $ putStrLn ("Creating data dir:" :: Text) >> print datadir
        mktree sessiondir
        mktree rescuedir

    let path = sessiondir </> fromText name
    fexists <- testfile path

    when fexists $ do
        die "ERROR: Name already used."

    dat <- fold (getOpenedDocuments False) L.list
    let paths = fmap snd dat
        rp = concat paths
        rescue = rescuedir </> (fromText name)

    mkdir rescue
    rescuedp <- mapM (rescueTempFile vb rescue) rp

    let content = T.unlines $ fmap (toS . F.encodeString) rescuedp

    liftIO $ writeTextFile path content
    when vb $ putStrLn (format ("Saved " %d% " files in " %fp)
                               (length rp) path)

rescueTempFile :: MonadIO m => Verbose -> FilePath -> FilePath -> m FilePath
rescueTempFile vb folder path =
    if isTempFile path
    then do
        content <- liftIO $ BL.readFile (F.encodeString path)
        let hash = T.map b64fix $ toS $ B64.encode $ B.encode $ M.md5 content
            b64fix x = case x of
                '+' -> '-'
                '/' -> '_'
                z   -> z
            target = T.concat [ (toS $ F.encodeString $ basename path),
                                "-", hash, ".",
                        case (extension path) of
                                    (Just e) -> e
                                    Nothing  -> ""
                            ]
            targetpath = folder </> (fromText target)

        when vb $ putStrLn (format ("Rescuing " %fp% " to " %fp) path targetpath)
        cp path targetpath
        pure targetpath
    else pure path


-- vim: set filetype=haskell:
